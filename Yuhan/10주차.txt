
=============================================================================

10주차
 - 리눅스의 부팅과 종료

학습내용    
   01. 리눅스 시스템의 부팅
   02. systemd 서비스
   03. 리눅스 시스템의 종료
   04. 데몬 프로세스
   05. 부트 로더

=============================================================================

00. 개요

 리눅스
시스템의	부팅과정	-> systemd 서비스	-> systemctl 명령
  부팅

 리눅스
시스템의	shutdown 명령	-> 런레벨 변경	-> 기타 시스템 종료 명령
  종료

 데몬과
부트 로더	데몬의 동작방식	-> 슈퍼데몬과 조상데몬	-> GRUB	-> root 암호복구



01. 리눅스 시스템의 부팅
* 리눅스 시스템의 부팅 과정
전원 on	-> 바이오스단계	-> 부트로더단계	-> 커널초기화단계 -> systemd 서비스단계	-> 로그인 프롬프트 출력
------- pc부팅 ---------   -------------------------- 리눅스 부팅 --------------------------------------

* 바이오스 단계
- pc의 전원 스위치를 켜서 부팅하면 제일 먼저 바이오스가 동작
- 바이오스는 PC에 장착된 기본적인 하드웨어(키보드, 디스크 등)의 상태를 확인한 후 
  부팅 장치를 선택하여 부팅 디스크의 첫 섹터에서 512바이트를 로딩
- 이 512 바이트가 마스터 부트 레코드 : 2차 부팅 프로그램의 위치저장

* 부트 로더 단계
- 바이오스 단계에서 MBR는 부트 로더를 찾아 메모리에 로딩
- 부트 로더는 여러 운영체제 중에서 부팅할 운영체제를 선택할 수 있도록 메뉴를 제공
- 부트 로더는 리눅스 커널을 메모리에 로딩
- 리눅스 커널은 /boot 디렉터리 아래에 'vmlinuz-버전명'의 형태로 제공
- 리눅스의 대표적인 부트 로더로는 GRUB와 LILO

* 커널 초기화 단계
- 커널은 가장 먼저 시스템에 연결된 메모리, 디스크, 키보드, 마우스 등 장치들을 검사
- 장치 검사 등 기본적인 초기화 과정이 끝나면 커널은 fork를 사용하지 않고 생성되는 프로세스와 스레드 생성
	-> 이 프로세스들은 메모리 관리 같은 커널의 여러 가지 동작을 수행
	-> 이들 프로세스는 일반적인 프로세스와 구분되도록 대괄호([])로 표시하며, 주로 PID 번호가 낮게 배정

* systemd 서비스 단계
- systemd 서비스 단계에 이르면 리눅스가 본격적으로 동작하기 시작
- systemd 서비스는 페도라에서 기존의 init 스크립트를 대체한 것으로 다양한 서비스를 동작시킴
	-> 각 서비스가 시작하는 과정은 화면에 메시지로 출력
	-> 페도라에서는 기본적으로 메시지가 보이지 않도록 하고 대신에 부트 스플래시라고 하는 이미지를 출력
	-> 부트 스플래시 화면이 진행 중일 때 atl+D 키를 누르면 메시지가 출력되는 화면으로 전환

*) 부팅 후 메시지 확인
- 부팅시 출력된 메시지는 dmesg 명령이나 more/var/log/boot.log 명령으로 확인 가능

*) 1번 프로세스
- 전통적으로 유닉스에서는 init 프로세스가 처음 생성된 프로세스로서 PID가 1번
- 리눅스 페도라 14부터 init 대신에 시스템과 서비스 관리자로 systemd를 사용하기 시작했고,
  systemd 프로세스가 1번 프로세스

*) 로그인 프롬프트 출력
- 마지막으로 그래픽 로그인 시스템인 GDM을 동작시키고, 로그인 프롬프트 출력

*) 기존 init 프로세스
- init 프로세스는 PID가 1번인 프로세스로 모든 프로세스의 조상 역할
- init 프로세스는 부팅 과정에서 각종 서비스를 제공하는 셀 스크립트 파일을 실행
- init 프로세스 설정 파일은 /etc/inittab
- init 프로세스가 실행하는 스크립트 파일은 /etc/rc.d/init.d 디렉터리에 위치
- /etc/rc*.d 디렉터리에 있는 파일들은 /etc/rc.d/init.d 파일에 대한 심벌릭 링크
- 현재는 systemd 서비스에 의해 대부분 대체되고 일부 파일만 유지
	-> k가 들어가는건 시스템을 죽이는 것
	-> s가 들어가는건 시스템을 살리는 것
- /etc/rc.d/init.d 디렉터리의 README 파일 : 전통적인 init 스크립트가 systemd 기반으로 바뀌었다는 것

*) init 프로세스와 런레벨
- init 프로세스에서 사용하던 런레벨의 개념에 대한 이해 필요
- init는 시스템의 단계를 일곱 개로 정의하여 구분하고 각 단계에 따라 셸 스크립트를 실행하는데,
  이 단계들을 런레벨이라고 함
런레벨		의미					관련 스크립트의 위치
0		시스템 종료				/etc/rc0.d
1, S		단일 사용자 모드			/etc/rc1.d
2		다중 사용자 모드(NFS를 실행하지 않음)	/etc/rc2.d
3		다중 사용자 모드(NFS 포함) :CLI		/etc/rc3.d
4		사용하지 않음(예비 번호)		/etc/rc4.d
5		X11 상태로 부팅		   :GUI		/etc/rc5.d
6		재시작					/etc/rc6.d











02. systemd 서비스

* systemd의 기본 개념
- systemd는 페도라 14에서 처음 등장하여 페도라 15부터 본격적으로 기존의 init 스크립트를 대체하기 시작
- 페도라 18부터는 거의 대부분의 서비스가 systemd 기반 변경
- systemd는 init 방식에 비해 가진 장점
	-> 소켓 기반으로 동작하여 inetd와 호환성을 유지한다.
	-> 셸과 독립적으로 부팅이 가능하다.
	-> 마운트 제어가 가능하다.
	-> fsck 제어가 가능하다.
	-> 시스템 상태에 대한 스냅숏을 유지한다.
	-> SELinux와 통합이 가능하다.
	-> 서비스에 시그널을 전달할 수 있다.
	-> 셧다운 전에 사용자 세션의 안전한 종료가 가능하다.

* systemd 유닛
- systemd는 전체 시스템을 시작하고 관리하는 데 유닛이라 부르는 구성 요소를 사용
- systemd는 관리 대상의 이름을 '서비스 이름.유닛 종류'의 형태로 관리
- 각 유닛은 같은 이름과 종류로 구성된 설정 파일과 동일한 이름을 사용
유닛		기능						
service 	가장 명백한 데몬을 시작.종료.재시작.로드한다.
slice 		프로세스 그룹의 자원을 계층적으로 관리한다.
scope		외부에서 생성된 프로세스를 관리한다.

* systemd 관련 명령
- systemd를 기반으로 서비스를 시작하거나 종료할 때 사용하는 명령은 systemctl
- systemctl [옵션][명령][유닛명]
- -a : 상태와 관계없이 유닛 전체를 출력한다.
- -t 유닛종류 : 지정한 종류의 유닛만 출력한다.
- start : 유닛을 시작한다.
- stop : 유닛을 정지한다.
- reload : 유닛의 설정 파일을 읽어온다.
- restart : 유닛을 재시작한다.
- status : 유닛 상태를 출력한다.
- enable : 부팅 시 유닛이 시작하도록 설정한다.
- disable : 부팅 시 유닛이 시작하지 않도록 설정한다.
- is-active : 유닛을 동작하고 있는지 확인한다.
- is-enabled : 유닛이 시작되었는지 확인한다.
- isolate : 지정한 유닛 및 이와 관련된 유닛만 시작하고 나머지는 정지한다.
- kill : 유닛에 시그널을 전송한다.
* 동작 중인 유닛 출력하기
- 옵션이나 명령 없이 systemctl 명령만 사용하면 현재 동작 중인 유닛이 출력
* 전체 유닛 출력하기 : -a 옵션
	-> -a 옵션을 지정하면 전체 유닛이 출력
* 특정 유닛 출력하기 : -t 옵션
* 유닛 상태 확인하기 : status 
* 유닛 서비스 정지하기 : stop	-> root 권한으로만 정지 가능
* 유닛 서비스 시작하기 : start

* 기본 target 지정하기
- 부팅할 때 동작할 기본 런레벨은 예전에는 /etc/inittab 파일에 지정했으나
  지금은 기본 target 으로 바뀜
- 다음과 같은 형식으로 지정
	-> systemctl set-default <name of target>.target

* target 변경하기
- systemd에서 런레벨을 변경하는 것도 isolate 명령으로 해결
- multi-user.target(런레벨 3)으로 변경할 때 
	systemctl isolate multi-user
	systemctl isolate runlevel3

- graphical.target(런레벨 5)으로 변경할 때
	systemctl isolate graphical
	systemctl isolate runlevel5

* init 명령으로 런레벨 변경하기
- init 명령만 입력하면 다음과 같이 출력
	init 
	init: required argument missing.
- init --help로 사용법을 알아보면 다음과 같이 출력
	
* telinit 명령으로 런레벨 변경하기










03. 리눅스 시스템의 종료

* shutdown 명령 사용하기
- 리눅스 시스템을 가장 정상적으로 종료하는 방법
- shutdown [옵션][시작][메시지]
- -k : 실제로 시스템을 종료하는 것이 아니라 사용자들에게 메시지만 전달한다.
- -r : 종료 후 재시작한다.
- -h : 종료하며 halt 상태로 이동한다.
- -f : 빠른 재시작으로 이 과정에서 fsck를 생략할 수도 있다.
- -c : 이전에 내렸던 shutdown 명령을 취소한다.
- 시간 : 종료할 시간이다. (hh:mm, +m, now)
- 메시지 : 모든 사용자에게 보낼 메시지이다.

* shutdown 명령으로 시스템 즉시 종료하기
- -h 옵션과 함께 현재 시간으로 지정

* 셧다운한다는 메시지 보내고 종료하기
- 시스템을 종료할 때 shutdown 명령으로 메시지를 보낼 수 있음
- 사용자들이 메시지를 받고 정리할 시간이 필요하므로 시간을 now로 지정하면 안되고
  특정 시간을 지정

* shutdown 명령으로 시스템 재시작하기 : -r 옵션 사용
* shutdown 명령 취소하기 : -c 옵션
* shutdown 메시지만 보내기 : -k 옵션
* 런레벨 변경하기
	-> 런레벨을 0으로 바꾸면 시스템이 종료
	-> 재시작하려면 런레벨을 6으로 변경
* systemd로 종료하기
* systemd로 재시작하기

* 기타 시스템의 종료
- 시스템을 종료하거나 재시작하기 위해 사용할 수 있는 명령 : halt, poweroff, reboot
- 이 명령들은 모두 systemctl 명령의 심벌릭 링크
- halt, reboot, poweroff 명령은 /var/log/wtmp 파일에 시스템 종료 기록을 남기고 
  시스템을 종료하거나, 재시작
- 사용할 수 있는 옵션
	-> -n : 재시작이나 종료 전에 sync를 호출하지 않는다.
	-> -w : 실질적으로 재시작하거나 종료하지는 않지만 wtmp 파일에 기록을 남긴다.
	-> -d : wtmp 파일에 기록을 남기지 않는다. -n옵션은 -d옵션을 포함한다.
	-> -f : 강제로 명령을 실행하며 shutdown을 호출하지 않는다.
	-> -p : 시스템의 전원을 끈다.









04. 데몬 프로세스
* 데몬
- 리눅스의 백그라운드에서 동작하면서 특정한 서비스를 제공하는 프로세스
- 리눅스 시스템에서 동작하는 각종 서비스를 제공하는 프로세스들이 바로 데몬

* 데몬의 동작 방식
- 독자형
	-> 시스템의 백그라운드에서 서비스별로 항상 동작
	-> 자주 호출되는 데몬이 아니라면 시스템의 자원을 낭비할 우려
- 슈퍼데몬에 의한 동작 방식
	-> 평소에는 슈퍼데몬만 동작하다가 서비스 요청이 오면 슈퍼데몬이 해당 데몬을 동작 시킴
	-> 독자형보다는 서비스에 응답하는 데 시간이 약간 더 걸릴 수 있지만 자원을 효율적으로 사용한다는 장점

* 슈퍼데몬
- 유닉스에서 슈퍼 데몬의 이름은 inetd
- 페도라에서는 보안 기능이 포함된 xinetd를 사용

* 데몬의 조상 : systemd와 커널 스레드 데몬
* systemd 데몬
- init을 대체한 데몬으로 대부분의 프로세스의 조상 프로세스
- pstree 명령으로 확인

* 커널 스레드 데몬
- 커널의 일부분을 프로세스처럼 관리하는 데몬
- ps 명령으로 확인했을 때 대괄호({})로 둘러싸여 있는 프로세스들
- 예전에는 대부분 k로 시작했으나 요즘은 이를 반드시 준수하지는 않음
- 커널 데몬은 대부분 입출력이나 메모리 관리, 디스크 동기화 등을 수행하며 대체로 PID가 낮은 번호로 할당
- 커널 데몬을 동작시키는 조상 데몬은 커널 스레드 데몬 : PID 2번








05. 부트 로더

* GRUB의 개요
- 'GRand Unifed Bootloader'의 약자로, 리눅스의 전통적인 부트 로더인 LILO의 단점을 보안하여
   GNU 프로젝트의 일환으로 개발
- GRUB는 LILO에 비해 다음과 같은 장점을 가지고 있음
	-> LILO는 리눅스에서만 사용이 가능하지만 GRUB는 윈도에서도 사용할 수 있다.
	-> LILO에 비해 설정과 사용이 편리하다.
	-> 부팅 시에 명령을 사용하여 수정이 가능하다.
	-> 멀티 부팅 기능을 지원한다.
- GRUB의 가장 최신 버전인 GRUB2로 페도라 16부터 기본 부트 로더로 사용중

* GRUB2 관련 디렉터리와 파일
- boot/grub2/grub.cfg 파일 : 기존의 menu.lst 파일을 대체하는 기본 설정 파일
- /etc/grub.d 디렉터리 : GRUB 스크립트를 가지고 있으며 GRUB의 명령이 실행될 때 순서대로 읽혀 grub.cfg 파일이 생성
- /etc/default/grub 파일 : GRUB 메뉴 설정 내용이 저장

