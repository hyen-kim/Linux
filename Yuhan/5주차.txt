===============================================================================

5주차 

수업내용 : vi 환경 설정과 셸 사용하기
      1. vi 환경설정(3장)
      2. 셸의 기능과 종류
      3. 셸 기본 사용법
      4. 입출력 방향 바꾸기
      5. 배시 셸 환경 설정
      6. 에일리어스
 
===============================================================================

: < 지난주에 하지 못했던 : vi 환경 설정과 셸 사용하기 >
- 사용자 홈 디렉터리에 .exrc 파일로 저장
- 환경 변수 EXINIT에 지정
- vi의 마지막 행 모드에서 명령으로 실행

1. vi 환경 설정 명령 (set)		
- set nu : 행번호 표시
- set nonu : 행번호 숨김
- set list : 특수문자 표시	=> 라인의 끝이 보임(탭, 끝)
- set nolist : 특수문자 숨김
- set showmode : 현재모드를 표시
- set noshowmode : 현재모드를 숨김
- set : vi 환경 설정 값 출력
- set all : 모든 vi 환경 변수와 현재 값을 출력


2. .exrc 파일에 설정하기
- 사용자 홈 디렉터리에 .exrc 파일로 저장
- 기본적으로 없는 파일이므로 사용자가 만들어야 함
- 파일에는 set 명령과 옵션만 지정
- 이 파일이 있을 경우 vi를 시작할 때마다 확인하므로 모든 파일에 동일하게 적용 가능
=> .exrc 파일을 사용자 홈 디렉터리에 생성하고 test.txt를 생성하면
기본적으로 .exrc에서 설정한 내용이 적용이 된다.
터미널을 닫았다가 켜도 그대로 유지가 된다.



3. EXINIT 환경 변수에 설정하기
- vi 환경 설정은 다음과 같이 셸의 환경 변수인 EXINIT에도 가능
EXINIT="su nonu nolist noshowmode"
export EXINIT 
=> 이런식으로 설정하고 vi 모드에 들어가면 적용됨



*) 정리 : 편집기에서 필요에 따라 사용하고 싶다면 set을 이용하면 되고
	  지속적으로 이용하고 싶다면 .exrc나 환경변수를 이용하면 된다.




************************************************************************

Chapter 04. 셸 사용하기 

< 셸의 기능 > : 명령어 해석기 기능, 프로그래밍 기능, 사용자 환경 설정 기능

1) 명령어 해석기 기능 
- 사용자와 커널 사이에 명령을 해석하여 전달하는 해석기와 번역기 기능
- 사용자가 로그인하면 셸이 자동으로 실행되어 사용자가 명령을 입력하기를 기다림 -> 로그인셸
- 로그인 셸은 /etc/passwd 파일에 사용자별로 지정
- 프롬프트 : 셸이 사용자의 명령을 기다리고 있음을 나타내는 표시 

2) 프로그래밍 기능
- 셸은 자체 내에 프로그래밍 기능이 있어 반복적으로 수행하는 작업을 하나의 프로그램으로 작성 가능
- 셸 프로그램은 셸 스크립트

3) 사용자 환경 설정 기능
- 사용자 환경을 설정할 수 있도록 초기화 파일 기능을 제공
- 초기화 파일에는 명령을 찾아오는 경로를 설정하거나, 파일과 디렉터리를 새로 생성할 때
  기본 권한을 설정하거나 다양한 환경 변수 등을 설정


< 종류 > : 본셸, 콘셸, C셸, 배시셸

1) 본셸 (Bourne shell)
- 유닉스 v7에서 처음 등장한 최초의 셸

2) C셸
- 캘리포니아대학교의 빌조이가 개발
- C셸의 명령 이름은 "csh"

3) 콘 셸 (Korn shell)
- AT&T 벨연구소의 데이비드 콘이 콘 셸을 개발
- C 셸과 달리 본 셸과의 호환성을 유지하고 히스토리, 에일리어스 기능 등
  C 셸의 특징도 모두 제공하면서 처리 속도도 빠름
- 콘 셸의 명령 이름은 "ksh"

4) 배시셸 (bash shell)
- 본 셸을 기본으로 개발한 셸로 브레인 톡스가 개발
- 본 셸과 호환성을 유지하면서 C 셸, 콘 셸의 편리한 기능도 포함
- 배시 셸의 명령 이름은 "bash"
- GPL 라이선스에 의거하여 자유롭게 사용 가능 
- 리눅스의 기본 셸로 제공되고 있어 리눅스 셸로도 많이 알려짐


< 셸 종류 알아보기 >
프롬프트 모양 참조 
- 본셸, 배시셸, 콘셸의 기본 프롬프트 : $
- C셸의 기본 프롬프트 : %
사용자 정보 확인 : / etc/passwd 파일
- 가장 앞에 나온 정보가 로그인ID
- 사용자 정보의 가장 마지막에 나온 /bin/bash가 기본 셸



< 기본 셸 바꾸기 >
chsh : 사용자 로그인 셸을 바꾼다.
ex) chsh -s 바꾸고자하는경로 셸


< 로그인 셸과 서브 셸 >
- 프롬프트에서 다른 셸을 실행할 수 있는데 이를 서브 셸이라고 함
- 서브 셸은 또 다른 서브 셸 생성 가능
- 서브 셸을 종료하는 명령은 ^d(ctrl+d), exit 등
- 서브 셸이 종료되면 서브 셸을 실행했던 이전 셸 환경으로 복귀
- 로그인 셸에서 로그아웃하면 접속 해제



< 셸의 내장 명령 >
- 셸은 자체적으로 내장 명령을 가지고 있음
- 셸 내장 명령은 별도의 실행 파일이 없고 셸 안에 포함
- 셸 명령 예 : cd



< 배시 셸의 출력 명령 >
- echo : 화면에 한 줄의 문자열을 출력
- printf : %지시자와 \ 문자를 이용하여 출력 형식을 지정 가능	-> \n을 해야함



< 특수문자 사용하기 >
- 사용자가 편리하게 명령을 입력하고 실행할 수 있도록 하기 위해 제공

1) * : 0개 이상의 문자로 대체

2) ?와 [] : 하나의 문자를 나타냄 
	-> ?는 길이가 1인 한문자
	-> []는 괄호 안에 포함된 문자 중 하나를 나타냄 -> [숫자-숫자], [숫자숫자숫자]

3) ~와 -
	-> ~은 현재 작업중인 현재 디렉터리 표시
	-> -는 이전 디렉터리 표시

4) ;과 |
	-> ;은 왼쪽부터 차례대로 실행
	-> |는 왼쪽 명령의 실행 결과를 오른쪽 명령의 입력으로 전달

5) '' 와 ""
	-> ''는 모든 특수문자의 기능을 없앰
	-> "" 는 $, '', \을 제외한 모든 특수 문자를 일반문자로 간주하여 처리

*) 명령으로 처리하고 싶다면 큰따옴표로 감싼 후에 작은따옴표 안에 써주면 됨


6) \ : 특수문자의 효과를 없애고 일반 문자처럼 처리


7) >, <, >> : 입출력의 방향을 바꾸는 특수문자
	-> > : 왼쪽껄 오른쪽으로 출력해 
	ex) ls -l > res : res 라는 파일이 없다면 생성되고 ls -l의 내용이 안에 들어감
	




< 입출력 방향 바꾸기 >

1. 표준 입출력 장치
- 표준 입력 장치 : 셸이 작업을 수행하는 데 필요한 정보를 받아들이는 장치 -> 키보드
- 표준 출력 장치 : 실행 결과를 내보내는 장치 -> 모니터
- 표준 오류 장치 : 오류 메시지를 내보내는 장치 -> 모니터


2. 파일 디스크립터
- 파일 관리를 위해 붙이는 일련번호
- 입출력 장치를 변경할 때는 이 파일 디스크립터를 사용
- 표준 입출력 장치를 파일로 바꾸는 것을 리다이렉션이라고 함
0 : 표준입력
1 : 표준출력
2 : 표준오류


① 출력 리다이렉션
>  
- 기존 파일의 내용을 삭제하고 새로 결과를 저장

- 명령 1>파일명
- 명령 >파일명

- 1> 파일 디스크립터 1번(표준 출력 화면)
- 셸은 >를 사용한 리다이렉션에서 지정한 이름의 파일이 없으면 
  파일을 생성해서 명령의 수행 결과를 저장
  파일이 있으면 이전의 내용이 없어지고 명령의 수행 결과로 대체

- 단점 : 예상치 않게 파일의 내용이 겹쳐 쓰이는 상황
  -> set -o noclobber : 덮어쓰지못하게
     set +o noclobber : 덮어쓸수있게



cat 명령으로 파일 생성하기 
- ex) cat > 텍스트파일명
- 마음대로 입력하다가 ctrl + d


>> 
- 지정한 파일이 없으면 파일을 생성하고, 파일이 있으면 기존 파일의 끝에 명령의 실행 결과를 추가




② 오류 리다이렉션
- 오류 리다이렉션은 파일 디스크립터 번호 생략 불가 2>
- 오류 메시지 버리기 /dev/null
- 표준 출력과 표준 오류를 한 파일로 리다이렉션 : 2>&1



③ 입력 리다이렉션
<
- 명령 0< 파일명
- 명령 < 파일명




< 배시 셸 환경 설정 >

1. 셸 변수와 환경변수 
- 셸의 환경을 실행하기 위한 값을 저장할 수 있도록 셸 변수와 환경 변수를 제공
- 셸 변수 : 현재 셸에서만 사용이 가능하고 서브 셸로는 전달되지 않음 (지역변수)
- 환경 변수 : 현재 셸 분만 아니라 서브 셸로도 전달 (전역변수)

2. 전체 변수 출력 : set, env
- set : 셸 변수와 환경변수 모두 출력
- env : 환경변수만 출력

3. 주요 셸 환경변수
HISTSIZE : 히스토리 저장 크기 		 
PATH : 명령을 탐색할 경로
HOME	 : 사용자 홈 디렉터리의 절대경로 
PWD	 : 작업 디렉터리의 절대경로
LANG	 : 사용하는 언어
SHELL	 : 로그인 셸
LOGNAME	 : 사용자 계정 이름	

4. 특정 변수 출력하기 : echo
- 변수의 값을 출력할 때는 변수 이름 앞에 특수 문자 $를 붙임

5. 셸 변수 설정하기
- 변수 이름과 문자열 사이에 공백이 있으면 안됨
- 변수명 = 문자열 
	-> 변수명은 대문자여야함

6. 환경 변수 설정하기 : export


7. 환경 변수를 다시 셸 변수로 바꾸기 : export -n


8. 변수 해제하기 : enset

