===================================================================

11주차

00. 개요
01. RPM 패키지 설치
02. dnf를 이용한 패키지 설치
03. 파일 아카이브와 압축
04. 소프트웨어 컴파일

===================================================================

00. 개요
 RPM 
패키지		RPM의 특징	-> 	rpm 명령
 설치


dnf로 
패키지		dnf의 특징	->	dnf 명령
 설치


소스 코드	아카이브 생성(tar)	->	파일압축	-> gcc 컴파일	-> 	make 명령
  설치









01. RPM 패키지 설치

* RPM 패키지의 특징과 구조
- RPM : 레드햇에서 만든 패키지 관리 도구

* RPM의 특징
- 바이너리 파일로 구성되어 있어 컴파일이 필요 없다.
- 패키지의 파일들이 관련 디렉터리로 바로 설치된다.
- 한 번에 설치된 패키지의 파일을 일괄적으로 삭제할 수 있다.
- 기존에 설치된 패키지를 삭제하지 않고 바로 업그레이드할 수 있다.
- 패키지의 설치 상태를 검증할 수 있다.
- 패키지에 대한 정보를 제공한다.
- 단점 : 패키지 의존성에 따라 관련 패키지가 먼저 설치되어 있지 않으면 설치할 수 없다.

* RPM 패키지의 이름 구성
- 패키지 이름 : 첫 번째 항목에는 패키지의 이름
- 패키지 버전 : 두 번째 항목은 패키지의 버전
- 패키지 릴리즈 : 릴리즈는 해당 버전에서 몇 번째 만들어진 것인지를 나타냄
- 아키텍처 : 사용하는 시스템 아키텍처로 x86은 인텔 x86 CPU를, 64는 64비트 운영체제임을 의미
- 확장자 : RPM 패키지의 확장자 .rpm을 사용하여 다른 패키지와 구분

* rpm 명령
- RPM 패키지를 관리한다.
- rpm [옵션]
- -vv : 디버깅 정보를 아주 자세하게 출력
- --quiet : 최대한 출력을 줄이고 오류 메시지만 출력
- --help : 도움말을 출력
- --version : 사용 중인 rpm의 버전을 출력

* RPMl 패키지 설치하기
- rpm -i [설치 옵션] [패키지명]
- RPM 패키지를 설치
- -h : #(해시)를 출력
- -v : 설치 과정에 대한 메시지를 출력
- --replacefiles : 이미 설치된 다른 패키지의 파일을 덮어쓰면서라도 패키지를 강제로 설치
- --replacepkgs : 패키지가 아미 설치되어 있어도 다시 설치
- --test : 설치하지는 않고 충돌 사항이 있는지만 점검하고 보고

* RPM 패키지 다운로드하기
- 네트워크를 통해 rpmfind.net에서 내려받아야함
- [현재 활동]을 선택
- 파이어폭스 웹 브라우저를 동작시켜 rpmfind.net 접속

* RPM 패키지 다운로드하기
- 터미널 애뮬레이터인 xterm 설치해야함 
- rpmfind.net에서 xterm 검색
- xterm-327-3.fc26.x86_64.rpm 내려받기
- rpm 파일을 선택하여 '파일저장'선택
- xterm 패키지 파일은 사용자 홈 디렉터리의 다운로드 디렉터리에 저장

* 패키지 설치와 의존성 : ivh 옵션
- xterm 패키지를 설치하려면 libxaw.so.7이 필요하다는 것. libxaw부터 설치해야함
- 다시 xterm 설치

* xterm 설치 확인 및 실행
- xterm 명령 확인
whereis xterm
- xterm 실행 :  X 윈도 환경에서 터미널을 애뮬레이션해주는 프로그램

* 패키지 강제 설치하기 
- 이미 설치된 패키지를 다시 설치할 경우
- 강제로 패키지를 설치할 때는 -replacepkqs 옵션을 사용

* RPM 패키지 업그레이드하여 설치하기 : -Uvh

* 패키지 정보 검색하기 : -q
	->  a : 전체 패키지의 목록을 출력
	-> f 파일명 : 파일명을 포함한 패키지명을 출력
	-> p 패키지명 : 지정한 패키지의 상세 정보를 출력
	-> R : 의존하고 있는 패키지의 목록을 출력

* 전체 패키지 목록 출력하기 : -qa

* 패키지 설치 여부 확인하기 : -qa | grep 

* 특정 파일을 포함한 패키지 확인하기 : -qf
	-> 왜 오류 발생 ? -f 옵션으로 파일을 지정할 때는 절대 경로 사용

* 패키지 상세 정보 확인하기 : -qi
- 패키지 이름 구성에서 첫 번째 항목에 해당하는 부분을 지정

* 패키지 상세 정보 확인하기 : -qif
- -f 옵션을 사용할 경우, 해당 파일이 속한 패키지의 상세 정보가 출력

* 패키지 상세 정보 확인하기 : -qip
- -p 옵션을 사용할 때는 해당 패키지가 위치한 디렉터리를 지정 : 패키지 이름만 지정할 경우 오류 발생
- -p 옵션을 사용할 때는 다음과 같이 패키지 파일이 위치한 디렉터리로 이동하거나 경로를 지정

* 패키지가 설치한 파일 목록 확인하기 : -ql

* 패키지의 의존성 확인하기 : -qR

* 패키지 삭제하기
rpm -e [패키지명]
- 앞에서 설치한 xterm 패키지를 삭제








02. dnf를 이용한 패키지 설치

* dnf란 ?
- 'dandified yum'의 약자
- RPM 기반의 리눅스 패키지 관리자로 기존의 패키지 관리자인 yum을 대체함

* dnf의 특징
- 패키지의 의존성을 자동으로 해결하여 설치.업그레이드.삭제할 수 있다.
- 설치 가능한 패키지에 대한 정보가 담긴 저장소 repository를 가지고 있다.
- 저장소의 정보에 따라 패키지를 관리한다.

* 패키지 목록 확인하기
- dnf list 명령의 출력 형식
- 패키지명.아키텍처 버전-릴리즈 저장소 또는 @설치한 저장소

* dnf list 명령에서 사용할 수 있는 옵션
dnf list --all : 이미 설치되었거나 설치 가능한 모든 패키지 목록을 출력
dnf list --available : dnf 저장소에서 설치 가능한 모든 패키지 목록을 출력
dnf list --upgrades : dnf 저장소에서 업그레이드가 가능한 패키지 목록을 출력
dnf list --installed : 이미 설치된 패키지 목록을 출력
dnf list --installed 패키지명 : 지정된 패키지가 설치되어 있는지 확인

* dnf check-update : 업그레이드가 가능한 패키지 목록 확인

* 패키지 설치하기 : dnf install 패키지명
- 먼저 의존성이 있는 패키지의 존재 여부를 확인
- 함께 설치해야 할 패키지 목록 출력
- 내려받을 파일의 크기와 실제로 설치되었을 때 필요한 디스크 용량
- 설치를 진행할 것인지 확인
① 예 : autotrace 패키지 설치 -> 의존성 확인 및 함께 설치할 패키지 목록 출력


* 패키지 업그레이드하기 : dnf upgrade 패키지명

* 패키지 정보 검색하기 : dnf info 패키지명
- 패키지 이름, 패키지 아키텍처, 버전, 릴리스, 패키지 파일 크기, 저장소, 요약 정보,
  URL, 라이선스, 설명 등 출력
 
* 패키지 삭제하기 : dnf remove 패키지명
- 패키지를 삭제할 때도 의존성을 확인한 후, 패키지 삭제를 진행할 것인지를 물어봄








03. 파일 아카이브와 압축

* 파일 아카이브
- 파일을 묶어서 하나로 만든 것
- tar 명령은 원래 여러 파일이나 디렉터리를 묶어서 마그네틱테이프와 같은 이동식 저장 장치에 
  보관하기 위해 사용하는 명령
- 현재는 다른 시스템과 파일을 주고받거나, 백업을 하기 위해 여러 파일이나 디렉터리를 하나의
  아카이브 파일로 생성하거나, 기존 아카이브에서 파일을 추출하기 위해 사용

기능 
c : 새로운 tar 파일을 생성
t : tar 파일의 내용을 출력
x : tar 파일에서 원본 파일을 추출
r : 새로운 파일을 추가
u : 수정된 파일을 업데이트
옵션
f : 아카이브 파일이나 테이프 장치를 지정
    파일명을 '-'로 지정하면 tar 파일 대신 표준 입력에서 읽어들인다
v : 처리하고 있는 파일의 정보를 출력
h : 심벌릭 링크의 원본 파일을 포함
p : 파일 복구 시 원래의 접근 권한을 유지
j : bzip2로 압축하거나 해제
z : gzip으로 압축하거나 해제

* 아카이브 내용 확인하기 : tvf 

* 아카이브 풀기 : xvf

* 아카이브 업데이트하기 : uvf
- u 기능은 지정한 파일이 아카이브에 없는 파일이거나, 아카이브에 있는 파일이지만
  수정된 파일일 경우 아카이브의 마지막에 추가 
  -> ch2/data 파일의 수정시간을 touch 명령으로 수정후 아카이브 업데이트

* 아카이브에 파일 추가 : rvf

* 아카이브 생성하고 압축하기
- 아카이브를 생성하면서 동시에 압축 수행
- 예 : gzip로 압축할 경우 z 옵션을 사용

* 파일 압축과 아카이브
- tar 파일로 생성한 것과 압축한 결과의 파일 크기를 비교
- 압축한 아카이브 파일의 내용은 tvf로 확인이 가능하며 xvf로 추출 가능

* 파일 압축하기 : gzip/gunzip - .gz 파일
gzip
-파일을 압축한다
- gzip [옵션] [파일명]
- -d : 파일 압축을 해제
- -l : 압축 파일의 정보를 보여줌
- -r : 하위 디렉터리를 탐색하여 압축
- -t : 압축 파일을 검사
- -v : 압축 정보를 화면에 출력
- -9 : 최대한 압축

* 압축 파일의 내용 보기 : zcat
- gzip으로 압축된 파일의 내용을 출력
- zcat [파일명]

* 압축 풀기 : gunzip
- gzip으로 압축된 파일의 압축을 푼다
- gunzip [파일명]

* bzip2/bunzip2 : .bz2 파일
bzip2
- 파일을 압축
- bzip2 [옵션] [파일명] 
- -d : 파일 압축을 해제 
- -l : 압축 파일의 정보를 보여줌
- -t : 압축 파일 검사
- -v : 압축 정보를 화면에 출력
- --best : 최대한 압축

* 압축 파일의 내용 보기 : bzcat
- bzip2로 압출된 파일의 내용을 출력
- bzcat [파일명]

* 압축 풀기 : bunzip2 
- bzip2로 압축된 파일의 압축을 푼다.
- bunzip2 [파일명]







04. 소프트웨어 컴파일

* 컴파일러 설치하기
- C 언어로 작성한 프로그램을 컴파일하기 위해서는 C 컴파일러가 필요
- 리눅스에서 사용하는 C 컴파일러는 GNU C 컴파일러로 패키지 이름이 gcc
- rpm: gcc 설치 여부 확인 -> 설치됨

* 실행 파일명 변경하기 
- gcc로 생성한 기본 실행 파일은 a.out
- 사용자가 원하는 이름으로 지정하려면 -o 옵션 사용

* make 명령 사용하기
- make 명령은 makefile (또는 Makefile)에 설정된 정보를 읽어서 여러 소스 파일을 컴파일하고
  링크하여 최종 실행 파일을 생성



