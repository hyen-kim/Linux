===================================================================

3주차
: 리눅스 파일 관련 명령어 (생성, 복사, 이동, 삭제, 검색)
: 4/6일 오전 10시까지 과제 제출

===================================================================

현재디렉터리확인 -> 디렉터리 이동 -> 
(pwd)		    (cd)		
디렉터리 내용보기 			-> 디렉터리 생성.삭제
*ls, dir(ls), vdir(ls-l)		   (mkdir, rmdir)
(-l,-a,-f) 


파일 내용보기 		-> 파일복사.이동.삭제 	-> 하드링크.심벌릭링크 생성 
(cat, more,less,tail)	   (cp, mv, rm)		  (ln)
-> 빈파일 생성 		-> 파일 내용 검색 	-> 파일 검색
(touch)		  	   (grep)             	  (find, which, whereis)


03. 파일 사용 명령
< 파일삭제하기 (rm) >
기능 : 파일을 삭제한다.
형식 : rm [옵션] [파일(디렉터리)]
옵션 : -i : 파일을 정말 삭제할 것인지 물어본다. 
       -r : 디렉터리 삭제할 때 지정한다.   -> rmdir 의 단점을 해결해주는 옵션
- 삭제할 파일을 인자로 지정하면 해당 파일이 삭제
- 바로 삭제되어 복구할 수도 없으므로 파일을 삭제할 때는 신중해야함
ex) data2 파일 삭제
    rm data2	: 바로 삭제됨
    rm -i data2 : 정말 삭제할 것인지 물어봄

디렉터리 삭제하기 : 일반적으로 rmdir을 사용하지만
rm 명령으로 디렉터리를 지울 때는 -r 옵션을 지정 ( 삭제된 디렉터리는 복구 불가능 )
-r 옵션을 지정하지 않을 경우 오류 메시지 출력
-> 비어있지 않은 디렉터리도 편하게 삭제가능

ri를 같이 사용하였을 때 최종적으로 삭제시 n라고 답하면 디렉터리가 삭제되지 않음
y라고 답했을 때 디렉터리에 삭제되지 않은 파일이 있을 경우 디렉터리가 비어 있지 않다는 메시지를
출력하고 디렉터리를 삭제하지 않음


< 파일 링크 >
- 파일링크는 기존에 있는 파일에 새로운 파일명을 붙이는 것을 말함
하드링크   : 기존 파일에 '새로운 파일명'을 추가
심벌릭링크 : 윈본파일을 가르키는 '새로운 파일' 생성

리눅스 파일의구성 : 파일명 + inode + 데이터블록
파일명 : 사용자가 파일에 접근할 때 사용하는 파일의 이름
inode : 파일에 대한 정보를 가진 특별한 구조체, 외부적으로는 번호로 표시,
        내부적으로는 파일의 종류 및 크기, 소유자, 파일 변경 시간, 
        파일명 등 파일 상세 정보와 데이터 블록의 주소를 저장
파일의 inode 번호는 ls-i 명령으로 확인 가능
파일명 앞에 출력된 숫자가 inode 번호
파일 이름은 다르지만 inode 번호가 같다면 같은 파일 => 하드링크로 생성된 파일은 inode가 같음


하드 링크 만들기 (ln)
기능 : 파일의 링크를 생성
형식 : ln [옵션] [원본 파일] [링크 파일]
옵션 : -s : 심벌릭 링크 파일을 생성
ln test Intest : test를 Intest로 링크를 만들어
ln -s test Intest : test파일의 심벌릭 링크 파일을 Intest로 생성
-> 파일에 여러 개의 이름을 붙일 수 있는데 이때 붙이는 파일명을 하드 링크라고 함

< 기억해두기 >
*) 링크와 복사의 차이 : 하드링크는 같은파일에 이름만 다르게 붙이는 것이지만, 복사는 완전히 독립적인 파일을 만듬
복사는 다른 곳에서 생성을 하기 때문에 inode값이 다름


심벌릭 링크 만들기 -s옵션
- 원본 파일을 가리키는 파일
- 심벌릭 링크의 inode 번호를 보면 원본파일과 다른 번호
- ls -l 명령으로 확인해보면 파일의 종류가 'l','L'로 표시되고 파일명도 '->'를 사용하여
  원본 파일이 무엇인지 알려줌


< 심벌릭 링크와 하드 링크의 차이 >
- 파일의 종류가 l L로 표시
- 하드 링크의 개수가 하나, 즉 원본 파일에 이름을 추가하는 것이 아님
- 파일 이름 뒤에 원본 파일의 이름 표시 ( ->data1)
- inode 번호가 원본 파일과 다름 즉, 원본 파일과 심벌릭 링크 파일은 별개의 파일

=> 심벌릭 링크 파일의 내용은 원본 파일의 경로를 가짐
=> 심벌릭 링크의 내용을 출력하면 원본 파일의 경로가 출력되는 것이 아니라
   원본 파일의 내용이 출력됨
=> 심벌릭 링크의 경우 원본 파일이 삭제되면 심벌릭 링크로 연결할 수 없다는 점을 주의
   윈도우의 바로가기와 같다고 보면 됨


< 파일과 관련한 유용한 명령 >
- 빈파일 만들기, 수정 시간 변경하기 : touch
  => 인자를 지정하지 않으면 빈 파일 생성
-> 없는 파일을 touch 한다면 빈 파일을 생성한다는 의미, 있다면 수정 시간을 변경한 다는 말
기능 : 빈 파일을 생성
옵션 : -a : 접근시간 변경
       -n : 수정시간 변경
       -t : 시간을 직접 입력 => MMDDHHmm

- 이미 있는 파일을 touch 명령으로 옵션 없이 사용하면 파일의 수정 시간이 현재 시간으로 변경
ex) data1.cp의 수정 시간을 touch 명령을 사용하여 현재시간으로 변경
    touch data1.cp



< 파일 내용 검색 : grep >
기능 : 지정한 패턴이 포함된 행을 갖는다.
형식 : grep [옵션] [패턴] [파일]
옵션 : -i : 대문자.소문자 모두 검색
       -l : 지정한 패턴이 포함된 파일명을 출력
       -n : 행 번호를 출력

ex) grep root /etc/passwd : root를 etc/passwd라는 폴더에서 찾아라



< 파일 검색 : find >
기능 : 지정한 위치에서 조건에 맞는 파일을 찾는다.
형식 : find [경로 검색 조건] [동작]
옵션 : -name filename  -> 파일명으로 검색
       -type 파일 종류 -> 파일 종류로 검색
       -user loginID   -> 지정한 사용자가 소유한 모든 파일을 검색
       -perm 접근 권한 -> 지정한 사용 권한과 일치하는 파일을 검색

동작 : -exec 명령 {}\; -> 검색된 파일에 실행
       -ok 명령{}\;    -> 사용자의 확인을 받아서 명령을 실행
       -print          -> 검색된 파일의 절대 경로명을 화면에 출력(기본동작)
       -ls             -> 검색 결과를 긴 목록 형식으로 출력

=> 접근 권한이 없는 디렉터리는 검색할 수 없어서 '허가 거부' 메시지가 출력
=> find 명령으로 검색한 모든 파일을 대상으로 동일한 작업을 수행하려면 -exec나 -ok 옵션 사용
=> rm 명령과 {} 사이, {}와 \ 사이에 공백이 있어야 하며, \과;은 공백 없이 붙어야함


< 명령의 위치 찾기 : whereis, which >
- 특정 명령이 있는 위치를 찾아서 절대 경로를 출력
- whereis 명령은 지정한 명령을 고정된 특정, 경로에서 검색

whereis 
기능 : 지정한 경로에서 명령의 바이너리 파일이나 메뉴얼 파일의 위치를 찾는다.
형식 : whereis [옵션] [파일]
옵션 : -b -> 바이너리 파일만 검색
       -m -> 메뉴얼 파일만 검색
       -s -> 소스 파일만 검색

which 
기능 : 명령어 파일의 위치를 찾아서 그 경로나 에일리어스를 출력한다.
형식 : which [명령]
=> which 명령은 파일을 찾으면 절대 경로를 출력하고 바로 종료
   따라서 which 명령은 최대 하나의 경로만을 출력하며 
   이 경로는 우리가 명령을 입력할 때 실행되는 파일


