
===================================================================================

6주차 

4장 : 셸 사용하기
   1) 에일리어스와 히스토리
   2) 프롬프트 설정
   3) 환경 설정 파일

5장 : 파일 접근 권한 관리하기
   1) 파일의 속성
   2) 파일의 접근 권한
   3) 기호를 이용한 파일 접근 권한 변경
   4) 숫자를 이용한 파일 접근 권한 변경
   5) 기본 접근 권한 설정

===================================================================================

< 4장 >

1) 에일리어스와 히스토리
* 에일리어스 
- 별명을 의미
- 다른 이름을 붙일 수 있도록 하는 기능
- 긴 명령 대신 별명을 만들어 사용 가능
- 여러 명령을 연결하여 하나의 명령으로 만들 수도 있음
- 자주 사용하는 옵션을 포함하여 새로운 이름을 붙여서 사용 가능 
alias 이름 = "명령"

-> 에일리어스에 인자 전달하기 : function 에일리어스명(){ 내용입력 }
-> 에일리어스 해제하기 : unalias 에일리어스명

* 히스토리
- 사용자가 이전에 입력한 명령을 다시 불러 사용하는 것
!! : 바로 직전에 실행한 명령을 재실행
!번호 : 히스토리에서 해당 번호의 명령을 재실행
!문자열 : 해당 문자열로 시작하는 마지막 명령을 재실행

-> 명령 편집하기와 재실행하기 : 화살표 키를 사용
-> 히스토리 저장하기 : 로그아웃할 때 홈 디렉터리 아래의 숨김 파일인 .bash_history에 히스토리 저장



2) 프롬프트 설정
- 프롬프트 설정 변수 : PS1 
: 프롬프트를 바꾸는 것은 환경 변수 PS1에 새로운 형태의 문자열을 지정



3) 환경설정 파일
- 사용자가 로그인할 때마다 자동으로 실행되는 명령을 저장한 것이 환경 설정 파일
- 시스템 환경 설정 파일과 사용자 환경 설정 파일이 있음
- 셀마다 다른 이름의 파일을 사용


시스템 환경 설정 파일 : 시스템을 사용하는 전체 사용자의 공통 환경을 설정하는 파일
/etc/profile 
/etc/bashrc
/etc/profile.d/*.sh


사용자 환경 설정 파일 : 각 사용자의 홈 디렉터리에 숨김 파일로 생성, 
                        사용자가 내용을 수정하고 관리 가능
~/.bash_profile
~/.bashrc
~/.bash_logout
~/.bash_history




사용자 환경 설정 파일 적용하기
: .bashrc
: .source .bashrc






< 5장 >


 파일의 
 속성과		파일속성확인	-> 접근권한의종류 -> 접근권한표기방법 -> 접근권한변경명령  
접근권한


접근 권한	기호를 이용한 권한변경	-> 숫자를 이용한 권한변경 
  변경


  기본
접근 권한	기본접근권한확인 -> 기본접근권한변경 -> 마스크 값 적용과정
  설정



01) 파일 속성
파일 접근 권한 보호 
: 리눅스 파일에 무단으로 접근하는 것을 방지하고 보호하는 기능을 제공
: 사용자는 자신의 파일과 디렉터리 중에서 다른 사용자가 접근해도 되는 것과 
  그렇지 않은 것을 구분하여 접근 권한을 제한  


* 파일의 속성

-rw-r--r--. 1 root root 158 12월 7 2016 /etc/hosts
- 	  : 파일의 종류 ( - (일반파일), d (디렉터리) )
rw-r--r-- : 파일을 읽고 쓰고 실행할 수 있는 접근 권한 표시
1 	  : 하드 링크의 개수
root	  : 파일 소유자의 로그인 ID
root 	  : 파일 소유자의 그룹 이름
158	  : 파일의 크기 (바이트단위)
12월 7 2016 : 파일이 마지막으로 수정된 날짜
/etc/hosts : 파일명 


* 파일의 종류
- 파일 속성의 첫번째 항목은 파일의 종류를 표시 
- -는 일반 파일을, d는 디렉터리를 의미 
- 파일의 종류를 알려주는 명령


* 파일의 접근 권한 표시
- 파일의 소유자와 그룹이나 기타 사용자들이 파일에 대해 가지고 있는 접근 권한을 표시


* 하드 링크의 개수
- 하드 링크는 한 파일에 대해 여러 개의 파일명을 가질 수 있도록 하는 기능


* 파일 소유자의 로그인 ID
- 리눅스에서 모든 파일은 소유자가 있음

* 파일 소유자의 그룹 이름
- ls -l 명령에서 출력되는 그룹명은 파일이 속한 그룹
- 사용자가 속한 기본 그룹은 시스템 관리자가 사용자를 등록할 때 결정
- 사용자가 속한 그룹을 알려주는 명령은 groups 

* 파일의 크기 : 바이트 단위

* 파일이 마지막으로 수정된 날짜



02) 파일의 접근 권한

* 접근 권한의 종류 
- 읽기 권한, 쓰기 권한, 실행 권한 등 세 가지로 구성

읽기 - 파일을 읽거나 복사		-> ls 명령 
쓰기 - 파일을 수정, 이동, 삭제		-> 파일을 생성, 삭제
실행 - 파일을 실행			-> cd 명령


* 접근 권한의 표기 방법
- 사용자 카테고리별로 누가 파일을 읽고 쓰고 실행할 수 있는지를 문자로 표현한 것
- 읽기 권한은 r, 쓰기 권한은 w, 실행 권한은 x로 나타내며
  해당 권한이 없는 경우에는 -(하이픈)로 표기
- 사용자 카테고리별로 세 가지 권한의 부여 여부를 rwx 세 문자를 묶어서 표기


	rw-		r--		r--
      소유자	       그룹            기타사용자
      읽고 쓰기        읽기만	       읽기만




* 접근 권한의 변경 명령
1. chmod : 파일이나 디렉터리의 접근 권한을 변경
   -R : 하위 디렉터리까지 모두 변경
   기호모드, 숫자모드 


* 기호모드
u : 파일 소유자
g : 소유자가 속한 그룹
o : 기타 사용자
a : 전체 사용자 
+ : 권한 부여 
- : 권한 제거
= : 접근 권한 설정




03) 기호를 이용한 파일 접근 권한 변경
u+w	: 소유자에게 쓰기 권한 부여
u-x	: 소유자의 실행 권한 제거
g+w	: 그룹의 쓰기 권한 부여
o-r	: 기타 사용자의 읽기 권한 제거
g+rw	: 그룹의 읽기,쓰기 권한 부여
g+wx	: 그룹의 쓰기, 실행 권한 부여
+wx	: 모든 사용자에게 umask에 따라 권한 부여
a+rwx	: 모든 사용자에게 읽기, 쓰기, 실행 권한 부여
u=rwx	: 소유자에게 읽기, 쓰기, 실행 권한 부여
go+w	: 그룹과 기타사용자에게 쓰기 권한 부여
u+x,go+w: 소유자에게 실행 권한을 부여하고 그룹과 기타 사용자에게 쓰기 권한 부여



04) 숫자를 이용한 파일 접근 권한 변경
* 숫자로 환산하기
- 숫자 모드에서는 각 권한이 있고 없고를 0과 1로 표기하고 이를 다시 환산하여 숫자로 표현
- 카테고리별로 권한의 조합에 따라 0부터 7로 나타내는 것
- 숫자의 각 위치가 사용자 카테고리를 나타내기 때문에 사용자 카테고리를 따로 지정할 필요가 없음
- 항상 세 자리 수를 사용해야 하므로 변경하려는 사용자 카테고리의 권한뿐만 아니라
  그룹과 기타 사용자의 권한도 반드시 같이 명시

     r     w     x
7 : 읽기, 쓰기, 실행
6 : 읽기, 쓰기
5 : 읽기, 실행ㅠ  
4 : 읽기
3 : 쓰기, 실행
2 : 쓰기
1 : 실행 
0 : 권한 없음



05) 기본 접근 권한 설정
- 리눅스에서 파일이나 디렉터리를 생성할 때 기본 접근 권한이 자동적으로 실행
- 일반 파일의 경우 소유자와 그룹은 읽기와 쓰기 권한이 설정되고 기타 사용자는 읽기 권한만 설정
-rw-rw-r--

- 디렉터리의 경우 소유자와 그룹은 읽기, 쓰기, 실행 권한이 설정되고 기타 사용자는 읽기, 실행 권한만 설정
drwxrwxrw-


* 기본 접근 권한 확인하고 변경하기
umask : 기본 접근 권한을 출력하거나 변경
	-S : 마스크 값을 문자로 출력

* 마스크 값의 의미
- 마스크 값은 파일이나 디렉터리 생성 시 부여하지 않을 권한을 지정해놓는 것
- 마스크 값이 002일 경우 이는 -------w-이고, 기타사용자에게는 쓰기 권한은 부여하지 않겠다는 뜻

요청권한	1	1	0	0
마스크		1	0	1	0
부여된권한	0	1	0	0
-> 요청권한에서 마스크의 권한을 뺌


* 여러 가지 마스크 값
마스크값	일반파일 	디렉터리 	의미
022		644		755		그룹과 기타 사용자는 읽기만
077		600		700		그룹과 기타 사용자의 접근 권한 모두 제거
027		640		750		그룹은 읽기, 실행만 기타사용자는 접근 권한을 모두 제거
		
- umask로 마스크 값을 바꿀 때 파일과 디렉터리에 모두 적용해봐야 함
- 마스크 값이 파일에는 적합하지만 디렉터리에는 적합하지 않을 수도 있음


* 특수 접근 권한
- 접근 권한은 원래 4자리
- 생략된 맨 앞자리는 특수 접근 권한 의미
- 맨 앞자리 숫자가 0이면 일반적인 접근 권한이지만 이 숫자가 1, 2, 4이면 특수 접근 권한이 설정

- setUID : 맨 앞자리가 4
- setGID : 맨 앞자리가 2
- sticky bit : 맨 앞자리가 1


* setUID
- 해당 파일이 실행되는 동안에는 파일을 실행한 사용자의 권한이 아니라 파일 소유자의 권한으로 실행
- 파일에 setUID 설정 : setUID는 접근 권한에서 맨 앞자리에 4를 설정
- setUID가 설정되면 소유자의 실행 권한에 's'가 표시
- set.exe를 실행하면 항상 user1의 권한을 가지고 실행된다는 의미
- /etc/shadow 파일은 root 계정으로만 수정이 가능
- passwd 명령은 SetUID가 설정되어 있기 때문에 소유자인 root 권한으로 실행이 되어 암호 변경 가능
- SetUID를 이용한 해킹도 등장하여 보안에 신경을 써야함



* setGID 
- setGID가 설정된 파일을 실행하면 해당 파일이 실행되는 동안에는 파일 소유 그룹의 권한으로 실행
- setGID는 2755와 같이 접근 권한에서 맨 앞자리에 2를 설정


* sticky bit (스티키 비트)
- 스티키 비트는 디렉터리에 설정
- 디렉터리에 스티키 비트가 설정되어 있으면 이 디렉터리에는 누구나 파일을 생성 가능
- 파일은 파일을 생성한 계정으로 소유자가 설정되며, 다른 사용자가 생성한 파일은 삭제 불가
- /tmp 디렉터리가 대표적
- 스티키 비트는 접근 권한에서 맨 앞자리에 1을 설정

















